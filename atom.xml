<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>戴毅者之行</title>
  
  <subtitle>我知道那些夏天，就像青春一样回不来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-05T12:57:02.200Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AICO</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/11/05/python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2017/11/05/python相关知识点/</id>
    <published>2017-11-05T12:57:02.086Z</published>
    <updated>2017-11-05T12:57:02.200Z</updated>
    
    <content type="html"><![CDATA[<ul><li>python字符串/元组/列表/字典互转</li></ul><h2 id="复制代码"><a href="#复制代码" class="headerlink" title="复制代码"></a>复制代码</h2><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="--coding:utf-8--"></a>-<em>-coding:utf-8-</em>-</h1><h1 id="1、字典"><a href="#1、字典" class="headerlink" title="1、字典"></a>1、字典</h1><p>dict = {‘name’: ‘Zara’, ‘age’: 7, ‘class’: ‘First’}</p><h1 id="字典转为字符串，返回：-‘age’-7-‘name’-‘Zara’-‘class’-‘First’"><a href="#字典转为字符串，返回：-‘age’-7-‘name’-‘Zara’-‘class’-‘First’" class="headerlink" title="字典转为字符串，返回： {‘age’: 7, ‘name’: ‘Zara’, ‘class’: ‘First’}"></a>字典转为字符串，返回：<type 'str'=""> {‘age’: 7, ‘name’: ‘Zara’, ‘class’: ‘First’}</type></h1><p>print type(str(dict)), str(dict)</p><h1 id="字典可以转为元组，返回：-‘age’-‘name’-‘class’"><a href="#字典可以转为元组，返回：-‘age’-‘name’-‘class’" class="headerlink" title="字典可以转为元组，返回：(‘age’, ‘name’, ‘class’)"></a>字典可以转为元组，返回：(‘age’, ‘name’, ‘class’)</h1><p>print tuple(dict)</p><h1 id="字典可以转为元组，返回：-7-‘Zara’-‘First’"><a href="#字典可以转为元组，返回：-7-‘Zara’-‘First’" class="headerlink" title="字典可以转为元组，返回：(7, ‘Zara’, ‘First’)"></a>字典可以转为元组，返回：(7, ‘Zara’, ‘First’)</h1><p>print tuple(dict.values())</p><h1 id="字典转为列表，返回：-‘age’-‘name’-‘class’"><a href="#字典转为列表，返回：-‘age’-‘name’-‘class’" class="headerlink" title="字典转为列表，返回：[‘age’, ‘name’, ‘class’]"></a>字典转为列表，返回：[‘age’, ‘name’, ‘class’]</h1><p>print list(dict)</p><h1 id="字典转为列表"><a href="#字典转为列表" class="headerlink" title="字典转为列表"></a>字典转为列表</h1><p>print dict.values</p><h1 id="2、元组"><a href="#2、元组" class="headerlink" title="2、元组"></a>2、元组</h1><p>tup=(1, 2, 3, 4, 5)</p><h1 id="元组转为字符串，返回：-1-2-3-4-5"><a href="#元组转为字符串，返回：-1-2-3-4-5" class="headerlink" title="元组转为字符串，返回：(1, 2, 3, 4, 5)"></a>元组转为字符串，返回：(1, 2, 3, 4, 5)</h1><p>print tup.<strong>str</strong>()</p><h1 id="元组转为列表，返回：-1-2-3-4-5"><a href="#元组转为列表，返回：-1-2-3-4-5" class="headerlink" title="元组转为列表，返回：[1, 2, 3, 4, 5]"></a>元组转为列表，返回：[1, 2, 3, 4, 5]</h1><p>print list(tup)</p><h1 id="元组不可以转为字典"><a href="#元组不可以转为字典" class="headerlink" title="元组不可以转为字典"></a>元组不可以转为字典</h1><h1 id="3、列表"><a href="#3、列表" class="headerlink" title="3、列表"></a>3、列表</h1><p>nums=[1, 3, 5, 7, 8, 13, 20];</p><h1 id="列表转为字符串，返回：-1-3-5-7-8-13-20"><a href="#列表转为字符串，返回：-1-3-5-7-8-13-20" class="headerlink" title="列表转为字符串，返回：[1, 3, 5, 7, 8, 13, 20]"></a>列表转为字符串，返回：[1, 3, 5, 7, 8, 13, 20]</h1><p>print str(nums)</p><h1 id="列表转为元组，返回：-1-3-5-7-8-13-20"><a href="#列表转为元组，返回：-1-3-5-7-8-13-20" class="headerlink" title="列表转为元组，返回：(1, 3, 5, 7, 8, 13, 20)"></a>列表转为元组，返回：(1, 3, 5, 7, 8, 13, 20)</h1><p>print tuple(nums)</p><h1 id="列表不可以转为字典"><a href="#列表不可以转为字典" class="headerlink" title="列表不可以转为字典"></a>列表不可以转为字典</h1><h1 id="4、字符串"><a href="#4、字符串" class="headerlink" title="4、字符串"></a>4、字符串</h1><h1 id="字符串转为元组，返回：-1-2-3"><a href="#字符串转为元组，返回：-1-2-3" class="headerlink" title="字符串转为元组，返回：(1, 2, 3)"></a>字符串转为元组，返回：(1, 2, 3)</h1><p>print tuple(eval(“(1,2,3)”))</p><h1 id="字符串转为列表，返回：-1-2-3"><a href="#字符串转为列表，返回：-1-2-3" class="headerlink" title="字符串转为列表，返回：[1, 2, 3]"></a>字符串转为列表，返回：[1, 2, 3]</h1><p>print list(eval(“(1,2,3)”))</p><h1 id="字符串转为字典，返回："><a href="#字符串转为字典，返回：" class="headerlink" title="字符串转为字典，返回："></a>字符串转为字典，返回：<type 'dict'=""></type></h1><p>print type(eval(“{‘name’:’ljq’, ‘age’:24}”))</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;python字符串/元组/列表/字典互转&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;复制代码&quot;&gt;&lt;a href=&quot;#复制代码&quot; class=&quot;headerlink&quot; title=&quot;复制代码&quot;&gt;&lt;/a&gt;复制代码&lt;/h2&gt;&lt;h1 id=&quot;coding-utf-8&quot;&gt;&lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>望海潮·东南形胜</title>
    <link href="http://yoursite.com/2017/10/23/%E6%9C%9B%E6%B5%B7%E6%BD%AE%C2%B7%E4%B8%9C%E5%8D%97%E5%BD%A2%E8%83%9C/"/>
    <id>http://yoursite.com/2017/10/23/望海潮·东南形胜/</id>
    <published>2017-10-23T08:33:33.000Z</published>
    <updated>2017-10-23T08:59:11.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作者-柳永-宋"><a href="#作者-柳永-宋" class="headerlink" title="作者:柳永(宋)"></a>作者:柳永(宋)</h1><hr><ul><li>东南形胜，三吴都会，钱塘自古繁华，烟柳画桥，风帘翠幕，参差十万人家。云树绕堤沙，怒涛卷霜雪，天堑无涯。市列珠玑，户盈罗绮，竞豪奢。</li><li>重湖叠巘清嘉。有三秋桂子，十里荷花。羌管弄晴，菱歌泛夜，嬉嬉钓叟莲娃。千骑拥高牙。乘醉听箫鼓，吟赏烟霞。异日图将好景，归去凤池夸。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;作者-柳永-宋&quot;&gt;&lt;a href=&quot;#作者-柳永-宋&quot; class=&quot;headerlink&quot; title=&quot;作者:柳永(宋)&quot;&gt;&lt;/a&gt;作者:柳永(宋)&lt;/h1&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;东南形胜，三吴都会，钱塘自古繁华，烟柳画桥，风帘翠幕，参差十万人家。云树绕
      
    
    </summary>
    
      <category term="诗词" scheme="http://yoursite.com/categories/%E8%AF%97%E8%AF%8D/"/>
    
    
      <category term="每天一诗词" scheme="http://yoursite.com/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>代码测试</title>
    <link href="http://yoursite.com/2017/10/22/%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2017/10/22/代码测试/</id>
    <published>2017-10-22T13:19:48.000Z</published>
    <updated>2017-10-31T06:13:50.166Z</updated>
    
    <content type="html"><![CDATA[<ul><li><del>代码测试？</del> 代码在哪？<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div></pre></td><td class="code"><pre><div class="line">第一步generate_captcha.py</div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> captcha.image <span class="keyword">import</span> ImageCaptcha</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">generateCaptcha</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,</span></span></div><div class="line"><span class="function"><span class="params">                 width = <span class="number">160</span>,#验证码图片的宽</span></span></div><div class="line"><span class="function"><span class="params">                 height = <span class="number">60</span>,#验证码图片的高</span></span></div><div class="line"><span class="function"><span class="params">                 char_num = <span class="number">4</span>,#验证码字符个数</span></span></div><div class="line"><span class="function"><span class="params">                 characters = string.digits + string.ascii_uppercase + string.ascii_lowercase)</span>:</span><span class="comment">#验证码组成，数字+大写字母+小写字母</span></div><div class="line">        self.width = width</div><div class="line">        self.height = height</div><div class="line">        self.char_num = char_num</div><div class="line">        self.characters = characters</div><div class="line">        self.classes = len(characters)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_captcha</span><span class="params">(self,batch_size = <span class="number">50</span>)</span>:</span></div><div class="line">        X = np.zeros([batch_size,self.height,self.width,<span class="number">1</span>])</div><div class="line">        img = np.zeros((self.height,self.width),dtype=np.uint8)</div><div class="line">        Y = np.zeros([batch_size,self.char_num,self.classes])</div><div class="line">        image = ImageCaptcha(width = self.width,height = self.height)</div><div class="line"></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(batch_size):</div><div class="line">                captcha_str = <span class="string">''</span>.join(random.sample(self.characters,self.char_num))</div><div class="line">                img = image.generate_image(captcha_str).convert(<span class="string">'L'</span>)</div><div class="line">                img = np.array(img.getdata())</div><div class="line">                X[i] = np.reshape(img,[self.height,self.width,<span class="number">1</span>])/<span class="number">255.0</span></div><div class="line">                <span class="keyword">for</span> j,ch <span class="keyword">in</span> enumerate(captcha_str):</div><div class="line">                    Y[i,j,self.characters.find(ch)] = <span class="number">1</span></div><div class="line">            Y = np.reshape(Y,(batch_size,self.char_num*self.classes))</div><div class="line">            <span class="keyword">yield</span> X,Y</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode_captcha</span><span class="params">(self,y)</span>:</span></div><div class="line">        y = np.reshape(y,(len(y),self.char_num,self.classes))</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(self.characters[x] <span class="keyword">for</span> x <span class="keyword">in</span> np.argmax(y,axis = <span class="number">2</span>)[<span class="number">0</span>,:])</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_parameter</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.width,self.height,self.char_num,self.characters,self.classes</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_test_captcha</span><span class="params">(self)</span>:</span></div><div class="line">        image = ImageCaptcha(width = self.width,height = self.height)</div><div class="line">        captcha_str = <span class="string">''</span>.join(random.sample(self.characters,self.char_num))</div><div class="line">        img = image.generate_image(captcha_str)</div><div class="line">        img.save(captcha_str + <span class="string">'.jpg'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">然后执行:</div><div class="line">cd /home/ubuntu;</div><div class="line">python</div><div class="line"><span class="keyword">import</span> generate_captcha</div><div class="line">g = generate_captcha.generateCaptcha()</div><div class="line">g.gen_test_captcha()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">第二部<span class="comment">###captcha_model.py</span></div><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">captchaModel</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,</span></span></div><div class="line"><span class="function"><span class="params">                 width = <span class="number">160</span>,</span></span></div><div class="line"><span class="function"><span class="params">                 height = <span class="number">60</span>,</span></span></div><div class="line"><span class="function"><span class="params">                 char_num = <span class="number">4</span>,</span></span></div><div class="line"><span class="function"><span class="params">                 classes = <span class="number">62</span>)</span>:</span></div><div class="line">        self.width = width</div><div class="line">        self.height = height</div><div class="line">        self.char_num = char_num</div><div class="line">        self.classes = classes</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(self,x, W)</span>:</span></div><div class="line">        <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_pool_2x2</span><span class="params">(self,x)</span>:</span></div><div class="line">        <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],</div><div class="line">                              strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(self,shape)</span>:</span></div><div class="line">        initial = tf.truncated_normal(shape, stddev=<span class="number">0.1</span>)</div><div class="line">        <span class="keyword">return</span> tf.Variable(initial)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span><span class="params">(self,shape)</span>:</span></div><div class="line">        initial = tf.constant(<span class="number">0.1</span>, shape=shape)</div><div class="line">        <span class="keyword">return</span> tf.Variable(initial)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_model</span><span class="params">(self,x_images,keep_prob)</span>:</span></div><div class="line">        <span class="comment">#first layer</span></div><div class="line">        w_conv1 = self.weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">32</span>])</div><div class="line">        b_conv1 = self.bias_variable([<span class="number">32</span>])</div><div class="line">        h_conv1 = tf.nn.relu(tf.nn.bias_add(self.conv2d(x_images, w_conv1), b_conv1))</div><div class="line">        h_pool1 = self.max_pool_2x2(h_conv1)</div><div class="line">        h_dropout1 = tf.nn.dropout(h_pool1,keep_prob)</div><div class="line">        conv_width = math.ceil(self.width/<span class="number">2</span>)</div><div class="line">        conv_height = math.ceil(self.height/<span class="number">2</span>)</div><div class="line"></div><div class="line">        <span class="comment">#second layer</span></div><div class="line">        w_conv2 = self.weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>])</div><div class="line">        b_conv2 = self.bias_variable([<span class="number">64</span>])</div><div class="line">        h_conv2 = tf.nn.relu(tf.nn.bias_add(self.conv2d(h_dropout1, w_conv2), b_conv2))</div><div class="line">        h_pool2 = self.max_pool_2x2(h_conv2)</div><div class="line">        h_dropout2 = tf.nn.dropout(h_pool2,keep_prob)</div><div class="line">        conv_width = math.ceil(conv_width/<span class="number">2</span>)</div><div class="line">        conv_height = math.ceil(conv_height/<span class="number">2</span>)</div><div class="line"></div><div class="line">        <span class="comment">#third layer</span></div><div class="line">        w_conv3 = self.weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">64</span>])</div><div class="line">        b_conv3 = self.bias_variable([<span class="number">64</span>])</div><div class="line">        h_conv3 = tf.nn.relu(tf.nn.bias_add(self.conv2d(h_dropout2, w_conv3), b_conv3))</div><div class="line">        h_pool3 = self.max_pool_2x2(h_conv3)</div><div class="line">        h_dropout3 = tf.nn.dropout(h_pool3,keep_prob)</div><div class="line">        conv_width = math.ceil(conv_width/<span class="number">2</span>)</div><div class="line">        conv_height = math.ceil(conv_height/<span class="number">2</span>)</div><div class="line"></div><div class="line">        <span class="comment">#first fully layer</span></div><div class="line">        conv_width = int(conv_width)</div><div class="line">        conv_height = int(conv_height)</div><div class="line">        w_fc1 = self.weight_variable([<span class="number">64</span>*conv_width*conv_height,<span class="number">1024</span>])</div><div class="line">        b_fc1 = self.bias_variable([<span class="number">1024</span>])</div><div class="line">        h_dropout3_flat = tf.reshape(h_dropout3,[<span class="number">-1</span>,<span class="number">64</span>*conv_width*conv_height])</div><div class="line">        h_fc1 = tf.nn.relu(tf.nn.bias_add(tf.matmul(h_dropout3_flat, w_fc1), b_fc1))</div><div class="line">        h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</div><div class="line"></div><div class="line">        <span class="comment">#second fully layer</span></div><div class="line">        w_fc2 = self.weight_variable([<span class="number">1024</span>,self.char_num*self.classes])</div><div class="line">        b_fc2 = self.bias_variable([self.char_num*self.classes])</div><div class="line">        y_conv = tf.add(tf.matmul(h_fc1_drop, w_fc2), b_fc2)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> y_conv</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">第三部train_captcha.py，</div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">import</span> generate_captcha</div><div class="line"><span class="keyword">import</span> captcha_model</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    captcha = generate_captcha.generateCaptcha()</div><div class="line">    width,height,char_num,characters,classes = captcha.get_parameter()</div><div class="line"></div><div class="line">    x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, height,width,<span class="number">1</span>])</div><div class="line">    y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, char_num*classes])</div><div class="line">    keep_prob = tf.placeholder(tf.float32)</div><div class="line"></div><div class="line">    model = captcha_model.captchaModel(width,height,char_num,classes)</div><div class="line">    y_conv = model.create_model(x,keep_prob)</div><div class="line">    cross_entropy = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(labels=y_,logits=y_conv))</div><div class="line">    train_step = tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(cross_entropy)</div><div class="line"></div><div class="line">    predict = tf.reshape(y_conv, [<span class="number">-1</span>,char_num, classes])</div><div class="line">    real = tf.reshape(y_,[<span class="number">-1</span>,char_num, classes])</div><div class="line">    correct_prediction = tf.equal(tf.argmax(predict,<span class="number">2</span>), tf.argmax(real,<span class="number">2</span>))</div><div class="line">    correct_prediction = tf.cast(correct_prediction, tf.float32)</div><div class="line">    accuracy = tf.reduce_mean(correct_prediction)</div><div class="line"></div><div class="line">    saver = tf.train.Saver()</div><div class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">        sess.run(tf.global_variables_initializer())</div><div class="line">        step = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            batch_x,batch_y = next(captcha.gen_captcha(<span class="number">64</span>))</div><div class="line">            _,loss = sess.run([train_step,cross_entropy],feed_dict=&#123;x: batch_x, y_: batch_y, keep_prob: <span class="number">0.75</span>&#125;)</div><div class="line">            <span class="keyword">print</span> (<span class="string">'step:%d,loss:%f'</span> % (step,loss))</div><div class="line">            <span class="keyword">if</span> step % <span class="number">100</span> == <span class="number">0</span>:</div><div class="line">                batch_x_test,batch_y_test = next(captcha.gen_captcha(<span class="number">100</span>))</div><div class="line">                acc = sess.run(accuracy, feed_dict=&#123;x: batch_x_test, y_: batch_y_test, keep_prob: <span class="number">1.</span>&#125;)</div><div class="line">                <span class="keyword">print</span> (<span class="string">'###############################################step:%d,accuracy:%f'</span> % (step,acc))</div><div class="line">                <span class="keyword">if</span> acc &gt; <span class="number">0.99</span>:</div><div class="line">                    saver.save(sess,<span class="string">"capcha_model.ckpt"</span>)</div><div class="line">                    <span class="keyword">break</span></div><div class="line">            step += <span class="number">1</span></div><div class="line"></div><div class="line"></div><div class="line">第四部predict_captcha.py</div><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFilter</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> generate_captcha</div><div class="line"><span class="keyword">import</span> captcha_model</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    captcha = generate_captcha.generateCaptcha()</div><div class="line">    width,height,char_num,characters,classes = captcha.get_parameter()</div><div class="line"></div><div class="line">    gray_image = Image.open(sys.argv[<span class="number">1</span>]).convert(<span class="string">'L'</span>)</div><div class="line">    img = np.array(gray_image.getdata())</div><div class="line">    test_x = np.reshape(img,[height,width,<span class="number">1</span>])/<span class="number">255.0</span></div><div class="line">    x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, height,width,<span class="number">1</span>])</div><div class="line">    keep_prob = tf.placeholder(tf.float32)</div><div class="line"></div><div class="line">    model = captcha_model.captchaModel(width,height,char_num,classes)</div><div class="line">    y_conv = model.create_model(x,keep_prob)</div><div class="line">    predict = tf.argmax(tf.reshape(y_conv, [<span class="number">-1</span>,char_num, classes]),<span class="number">2</span>)</div><div class="line">    init_op = tf.global_variables_initializer()</div><div class="line">    saver = tf.train.Saver()</div><div class="line">    gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=<span class="number">0.95</span>)</div><div class="line">    <span class="keyword">with</span> tf.Session(config=tf.ConfigProto(log_device_placement=<span class="keyword">False</span>,gpu_options=gpu_options)) <span class="keyword">as</span> sess:</div><div class="line">        sess.run(init_op)</div><div class="line">        saver.restore(sess, <span class="string">"capcha_model.ckpt"</span>)</div><div class="line">        pre_list =  sess.run(predict,feed_dict=&#123;x: [test_x], keep_prob: <span class="number">1</span>&#125;)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> pre_list:</div><div class="line">            s = <span class="string">''</span></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i:</div><div class="line">                s += characters[j]</div><div class="line">            <span class="keyword">print</span> s</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;del&gt;代码测试？&lt;/del&gt; 代码在哪？&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line
      
    
    </summary>
    
      <category term="呼呼呼" scheme="http://yoursite.com/categories/%E5%91%BC%E5%91%BC%E5%91%BC/"/>
    
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>美丽的花儿</title>
    <link href="http://yoursite.com/2017/10/22/%E7%BE%8E%E4%B8%BD%E7%9A%84%E8%8A%B1%E5%84%BF/"/>
    <id>http://yoursite.com/2017/10/22/美丽的花儿/</id>
    <published>2017-10-22T03:10:54.000Z</published>
    <updated>2017-11-05T02:16:05.327Z</updated>
    
    <content type="html"><![CDATA[<ul><li>美丽花儿：<br><img src="http://img.blog.csdn.net/20171022113733477?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY4ODQ1MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li></ul><hr><ul><li>可爱的小狗狗：<br><img src="http://img.blog.csdn.net/20171022113755379?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY4ODQ1MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li><li><del>可爱的小狗狗</del> 这哪是狗？！明明是头驴！（只听那志博说关我啥事…）<br><img src="/img/donkey1.jpg" alt="明明是头驴"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;美丽花儿：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171022113733477?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY4ODQ1MDE=/font/5a
      
    
    </summary>
    
      <category term="测试" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>声声慢·寻寻觅觅</title>
    <link href="http://yoursite.com/2017/10/22/%E5%A3%B0%E5%A3%B0%E6%85%A2%EF%BC%9A%E5%AF%BB%E5%AF%BB%E8%A7%85%E8%A7%85/"/>
    <id>http://yoursite.com/2017/10/22/声声慢：寻寻觅觅/</id>
    <published>2017-10-22T02:31:20.000Z</published>
    <updated>2017-10-23T08:59:32.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="作者：李清照-宋"><a href="#作者：李清照-宋" class="headerlink" title="作者：李清照(宋)"></a>作者：李清照(宋)</h2><hr><ul><li>寻寻觅觅，冷冷清清，凄凄惨惨戚戚。乍暖还寒时候，最难将息。三杯两盏淡酒，怎敌他、晚来风急？雁过也，正伤心，却是旧时相识。</li><li>满地黄花堆积。憔悴损，如今有谁堪摘？守着窗儿，独自怎生得黑？梧桐更兼细雨，到黄昏、点点滴滴。这次第，怎一个愁字了得！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;作者：李清照-宋&quot;&gt;&lt;a href=&quot;#作者：李清照-宋&quot; class=&quot;headerlink&quot; title=&quot;作者：李清照(宋)&quot;&gt;&lt;/a&gt;作者：李清照(宋)&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;寻寻觅觅，冷冷清清，凄凄惨惨戚戚。乍暖还寒时候，最难将息。三杯两盏
      
    
    </summary>
    
      <category term="诗词" scheme="http://yoursite.com/categories/%E8%AF%97%E8%AF%8D/"/>
    
    
      <category term="每天一诗词" scheme="http://yoursite.com/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>不要跟我比懒，我懒得跟你比</title>
    <link href="http://yoursite.com/2017/10/21/2017.10.21%E6%9D%82%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/10/21/2017.10.21杂记/</id>
    <published>2017-10-21T05:50:44.000Z</published>
    <updated>2017-10-22T03:13:26.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="早上"><a href="#早上" class="headerlink" title="早上"></a>早上</h1><hr><ul><li>将近睡到十点起床，刷会动态洗了个澡就快十一点二十，匆忙去食堂吃完饭，就赶紧跑到了实验室</li></ul><h1 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h1><hr><ul><li>总感觉累才能够让我感觉到充实，有事情可做，总比没有目标闲的无聊好得多。</li><li>有时候我又感觉自己很懒。比如说做这个博客，从开学到现在，拖拖拉拉那么久才做的有点样子</li><li>是不是我对自己要求太高了。退一步来讲，对于一个刚接触计算机开源知识一年不到的人来说，能做到这样算不算是不错了，懒人只能这样安慰自己</li><li>突然想到有人说我傻。傻不傻我也不知道。傻子一般不知道自己傻吧…</li><li>下午还有一些事情要处理。晚上留点时间学习吧。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;早上&quot;&gt;&lt;a href=&quot;#早上&quot; class=&quot;headerlink&quot; title=&quot;早上&quot;&gt;&lt;/a&gt;早上&lt;/h1&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;将近睡到十点起床，刷会动态洗了个澡就快十一点二十，匆忙去食堂吃完饭，就赶紧跑到了实验室&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 
      
    
    </summary>
    
      <category term="周记" scheme="http://yoursite.com/categories/%E5%91%A8%E8%AE%B0/"/>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>滕王阁序</title>
    <link href="http://yoursite.com/2017/10/17/%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/10/17/滕王阁序/</id>
    <published>2017-10-17T06:10:44.000Z</published>
    <updated>2017-10-21T06:51:07.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作者-王勃-唐"><a href="#作者-王勃-唐" class="headerlink" title="作者: 王勃(唐)"></a>作者: 王勃(唐)</h1><hr><ul><li>豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。</li><li>时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得仙人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。</li><li>披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰迷津，青雀黄龙之舳。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。</li><li>遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。四美具，二难并。穷睇眄于中天，极娱游于暇日。天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？ </li><li>嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！</li><li>勃，三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，慕宗悫之长风舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今兹捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？</li><li>呜乎！胜地不常，盛筵难再；兰亭已矣，梓泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔：<ul><li>滕王高阁临江渚，佩玉鸣鸾罢歌舞。</li><li>画栋朝飞南浦云，珠帘暮卷西山雨。</li><li>闲云潭影日悠悠，物换星移几度秋。</li><li>阁中帝子今何在？槛外长江空自流。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;作者-王勃-唐&quot;&gt;&lt;a href=&quot;#作者-王勃-唐&quot; class=&quot;headerlink&quot; title=&quot;作者: 王勃(唐)&quot;&gt;&lt;/a&gt;作者: 王勃(唐)&lt;/h1&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越
      
    
    </summary>
    
      <category term="诗词" scheme="http://yoursite.com/categories/%E8%AF%97%E8%AF%8D/"/>
    
    
      <category term="每天一诗词" scheme="http://yoursite.com/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
</feed>
